We are working at a company that develops sensors applicable to various
domains and problems. These sensors we design and produce emit values at
constant time intervals. For example, we have temperature sensors that, once
installed, generate room temperature data every minute. We also have sensors
that detect environmental humidity and produce data every three seconds.
Our company wants to take a qualitative leap and offer a new version of the
sensor firmware so that the sensors not only emit values (temperature,
humidity, etc.), but also provide users with repetitive signal fragments to help
identify trends or behavioral patterns in the signals. A clear example is a sensor
developed some years ago that provides data on the electrical activity of the
heart — commonly known as an electrocardiogram.
In an electrocardiogram, the domain expert (a doctor) can identify different
waves that are common across individuals, even when these waves or
structures are not exactly the same and may vary depending on activity, etc.
The goal of this practice is to identify similar behavior patterns in time series so
that the sensors our company offers not only produce real measurement values
but also provide labels (when possible) for parts of the signal. This acts as a
transformation from a continuous domain to a discrete one. However, it is not a
typical transformation, since a set of discrete values can, in turn, be grouped. For
example, the P, Q, R, S, T, U waves can be unified to indicate a heartbeat.
Students must design and implement an evolutionary algorithm in Python to solve
the described problem. They may use any time series dataset of their choice. The
resulting algorithm, which can be tested on various datasets to assess its
effectiveness in detecting repetitive patterns, will be evaluated using a dataset that
will be provided after the practice is submitted. This dataset will serve as a test set
to verify the functionality of the proposed algorithm.
Students must submit both the Python code and a report that explains, both
theoretically and experimentally:
• A description of the methodology used.
• Instructions on how to run the algorithm, including different options. A user
manual.