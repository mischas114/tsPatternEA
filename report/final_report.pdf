Evolutionary Pattern Detection in Time Series Sensor Data

Authors: Mischa TettenbornAffiliation: UCO CÃ³rdobaDate: May 26, 2025

Abstract

The objective of this study is to enhance sensor firmware capabilities by detecting repetitive signal patterns using an evolutionary algorithm. Synthetic ECG-like signals, including labeled heart-wave annotations, were segmented and analyzed. Signal preprocessing involved smoothing, amplitude normalization, and peak detection using a threshold factor of 0.6 with a minimum peak distance of 70 samples. Features were extracted locally from segmented windows and clustered using k-means. The evolutionary algorithm efficiently segmented the data, identifying consistent ECG-like patterns, notably peaks labeled P, Q, and R. The methodology demonstrated robust performance, accurately identifying annotated peaks and effectively labeling repetitive segments, even within noisy synthetic data. This modular approach significantly advances real-time discrete pattern recognition, potentially enhancing sensor firmware applications.

Introduction

Intelligent sensors extend beyond mere raw data collection, incorporating sophisticated pattern detection and labeling to enhance interpretability and usability. A significant challenge exists in reliably detecting repetitive patterns within noisy time-series data, such as electrocardiograms (ECG). This research introduces an evolutionary algorithm capable of accurately segmenting and labeling discrete ECG-like patterns, thereby advancing sensor functionality and data processing capabilities.

Dataset Description

The synthetic dataset utilized is Synthetic-three-patterns-with-noise.csv (metadata.json), comprising 4801 samples from one sensor channel. Ground-truth annotations (P, Q, R peaks) are provided in heartbeats.json. Visual representations include wave_annotation.png, wave_zoomed.png, and all_peaks.png, demonstrating the characteristics and accuracy of annotations.

Methodology

5.1 Signal Preprocessing

Signals were preprocessed by smoothing using a moving window (5 samples), amplitude normalization, and peak detection with threshold factor 0.6 and minimum spacing of 70 samples.

5.2 Feature Extraction

Four key features were computed within local segments (all_features.csv). The extracted features were visually evaluated (all_features.png), highlighting segment-specific behaviors.

User Input Required: Provide specific calculations or formulae used for feature extraction from all_features.csv.

5.3 Evolutionary Algorithm for Segmentation

Segment boundaries were represented by chromosomes defining start and end indices. The fitness function optimized intra-segment variance. Genetic operations, including mutation and crossover, optimized segmentation results illustrated in evolutionary_segment.png.

User Input Required: Provide detailed evolutionary algorithm parameters (population size, generations, mutation/crossover rates).

5.4 Labeling and Clustering

Segments were clustered using k-means clustering (n_clusters = 3) for labeling, identifying repetitive ECG-like patterns.

Experiments

The evolutionary segmentation algorithm was tested on the synthetic dataset. Validation involved manual annotations (P, Q, R) provided in heartbeats.json. Evaluations combined visual inspections and statistical metrics comparing predicted versus true peak positions.

User Input Required: Insert specific statistical measures used (e.g., mean distance between detected and annotated peaks).

Results

Visual results were provided in wave_annotation.png (peaks), evolutionary_segment.png (segmentation), and all_features.png (features). Seven peaks were detected, aligning closely with annotations.

User Input Required: Insert numerical metrics quantifying accuracy (peak detection accuracy, segment consistency).

Discussion

The algorithm successfully identified ECG-like patterns in noisy data. Strengths include adaptability and robust clustering capabilities. Limitations involve sensitivity to peak detection thresholds and potential segment size-related overfitting. Future improvements could explore adaptive thresholds, refined post-processing, and integration of deep learning techniques.

Conclusion

The developed evolutionary-based algorithm provides a modular and robust solution for discrete pattern detection in sensor time-series data. Practical firmware integration is feasible, enabling real-time event annotation and improving overall sensor functionality.

